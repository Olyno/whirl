/**
  * in-and-out
  *
  * @author jh3k
*/

@use 'common/utils' as *;
@use 'common/utils' as *;
@use 'common/colors' as colors;

//! Not working
// TODO fix it

$children: 5;
$size: 10;
$radius: 30;
$offset: #{calc(360 / $children) / 4};

@keyframes in-and-out {
  0%,
  30% {
    transform: rotate(calc(var(--offset) * -1deg));
  }
  70%,
  100% {
    transform: rotate(calc(var(--offset) * 1deg));
  }
}

@keyframes in-and-out-two {
  0%,
  30% {
    transform: rotate(calc(var(--offset) * 1deg));
  }
  70%,
  100% {
    transform: rotate(calc(var(--offset) * -1deg));
  }
}

@keyframes in-and-out-children {
  0%,
  50% {
    transform: rotate(calc(var(--rotation) * 1deg)) translate(0, 15px);
  }
  80%,
  100% {
    transform: rotate(calc(var(--rotation) * 1deg)) translate(0, 40px);
  }
}

@keyframes in-and-out-two-children {
  0%,
  50% {
    transform: rotate(calc(var(--rotation) * 1deg)) translate(0, 40px);
  }
  80%,
  100% {
    transform: rotate(calc(var(--rotation) * 1deg)) translate(0, 15px);
  }
}

$duration: 1s;
.in-and-out {
  & > div {
    @include sizeCSS($size);
    position: absolute;

    &:nth-of-type(1) {
      --multiplier: 1;
      animation: in-and-out $duration infinite ease both;
      div {
        animation: in-and-out-children $duration infinite ease;
      }
    }
    &:nth-of-type(2) {
      --multiplier: 2;
      animation: in-and-out-two $duration infinite ease both;
      div {
        animation: in-and-out-two-children $duration infinite ease;
      }
    }
  }

  div div {
    background: colors.$primary;
    border-radius: 100%;
    height: $size;
    width: $size;
    position: absolute;
    @for $c from 1 through $children {
      &:nth-child(#{$c}) {
        --rotation: #{calc(360 / $children) * $c};
      }
    }
  }
}
